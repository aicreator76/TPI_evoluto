name: CI
on:
  push:
  pull_request:
  workflow_dispatch:
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint-type:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt','pyproject.toml','.pre-commit-config.yaml') }}
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
          pip install pre-commit mypy bandit pip-audit
      - name: Pre-commit (black/isort/flake8)
        run: pre-commit run --all-files
      - name: Mypy
        run: mypy .
      - name: Bandit
        run: bandit -q -r .
      - name: Pip-audit
        run: pip-audit -r requirements.txt || true

  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint-type
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov coverage
      - name: Pytest
        run: pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml
      - name: Store coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  semantic-pr:
    if: github.event_name == 'pull_request'
    name: Conventional PR Title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs-build:
    if: github.event_name != 'pull_request'
    name: Docs build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install mkdocs mkdocs-material
      - run: mkdocs build --strict

  ci-status-bridge:
    name: CI status bridge
    runs-on: ubuntu-latest
    needs: [lint-type, tests]
    steps:
      - name: Publish required commit status 'CI'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          state="success"
          if [ "${{ needs.lint-type.result }}" = "failure" ] || [ "${{ needs.tests.result }}" = "failure" ]; then state="failure"; fi
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d @- <<JSON
          {"state":"$state","context":"CI","description":"Bridge status for branch protection","target_url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}
          JSON