name: CI
on: [push, pull_request, workflow_dispatch]
permissions:
  contents: read
  statuses: write
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint-type:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt','pyproject.toml','.pre-commit-config.yaml') }}
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
          pip install pre-commit mypy bandit pip-audit
      - name: Pre-commit (black/isort/flake8)
        run: pre-commit run --all-files
      - name: Mypy
        run: mypy .
      - name: Bandit
        run: bandit -q -r .
      - name: Pip-audit (non-fail)
        run: pip-audit -r requirements.txt || true

  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint-type
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov coverage
      - name: Pytest
        run: pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml
      - name: Store coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  # Bridge che pubblica il commit status 'CI' richiesto dalla protezione
  ci-status-bridge:
    name: CI status bridge
    if: always()
    needs: [lint-type, tests]
    runs-on: ubuntu-latest
    steps:
      - id: derive
        run: |
          lt="${{ needs.lint-type.result }}"; ts="${{ needs.tests.result }}"
          state="success"
          if [ "$lt" != "success" ] || [ "$ts" != "success" ]; then state="failure"; fi
          echo "state=$state" >> "$GITHUB_OUTPUT"
      - name: Publish required commit status 'CI'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d @- <<JSON
          {"state":"${{ steps.derive.outputs.state }}","context":"CI","description":"Aggregated result (lint/type/tests)","target_url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}
          JSON